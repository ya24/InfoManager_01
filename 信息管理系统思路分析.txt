个人信息:
	学号、姓名、性别、年级、系别、专业、出生日期、联系方式、个性签名、地址、照片
	
一、	基本功能要求
	管理员信息管理
		登录、注销功能
		修改密码功能
	部落成员信息管理
		添加成员
		删除成员
		修改成员信息
	按条件查找筛选成员
	
二、	高级特性
	管理员权限管理
	成员信息包含照片
	连接数据库性能的优化，比如：Connection
	
	
	
	
信息管理系统需求文档
1.管理员	--- 登录、注销功能	修改密码功能
     部落成员	---添加成员	删除成员	修改成员信息
     
2.界面设计
	登陆界面
	主界面（默认显示）

	信息面板
	查询信息面板
	添加信息面板
	修改信息面板
	删除信息面板
	修改密码面板
	
	
3、类的设计
	界面类
		登录界面类（框架）	动作、选项		LoginView.java
		信息管理系统主界面类（框架）	动作		InfoManagerView.java
		信息面板类			InfoPanel.java
		查询信息面板类	动作、选项		InfoSelectPanel.java
		添加信息面板类	动作		InfoInsertPanel.java
		修改信息面板类	动作		InfoUpdatePanel.java
		删除信息面板类	动作		InfoDelPanel.java
		修改密码面板类	动作		UpdatePasswordPanel.java

	事件类
		动作事件类
			登录界面动作事件类	LoginActEvents.java
			信息管理系统主界面动作事件类	InfoManagerActEvents.java
			查询信息面板动作事件类	InfoSelActEvents.java
			添加信息面板动作事件类	InfoInsActEvents.java
			修改信息面板动作事件类	InfoUpdActEvents.java
			删除信息面板动作事件类	InfoDelActEvents.java
			修改密码面板动作事件类	UpdPswActEvents.java
		
		选项事件类
			列表框，组合框选项事件类	ItemEvents.java

	数据库操作类
		查询	
			---登录界面查询数据库所有信息，再判断学号、密码、身份是否同时正确
			---查询界面	--依据年级、系别、性别 查询学号
						--依据学号查询个人信息，并显示
		分析：查询时只是sql不同
			加入判断	无？
					三个?
					一个？
		总结：只需一个查询类InfoSelect。java
		
		----------------------------------------------------------------
						
		添加	---添加界面 往数据库添加用户信息
		
		修改	---修改界面	--先依据学号查询个人信息，并显示	--再根据用户输入修改数据库信息
			---修改密码	--依据学号修改用户密码
		
		删除	---删除界面	--先依据学号查询个人信息，并显示	--再删除数据库信息(根据学号删除)
		
		分析：增删改只是sql不同
				---添加	要对占位符赋值
				---修改	要对占位符赋值
					--------------------------合并成一个
				---删除	根据学号删除，占位符只有一个
				
				---------------------------------------在发送sql和对占位符赋值时加入if判断
				
		总结：只需一个更新类InfoUpdate.java


4、包的设计
	view
		---frameView
			---loginFrameView
			---mainFrameView
		
		---panelView
			---InfoHandlePanelView
	
	control
		---actionControl
				---loginActControl
				---mainFrameActControl
				---InfoHandleActControl
		---itemControl
		
		
	model
		---daoModel
	
	

思路分析：	
	
LoginActEvents.java登录界面动作事件类(已完成)
	---思路：根据学号查询信息，返回一个结果集，判断学号、密码、身份是否与数据库中的数据匹配
				 是：显示信息管理系统主界面
				 否：弹出对话框，提示用户“您的信息有误！请重新输入”，并清空文本框
------------------------------------------------------------------------

InfoSelActEvents.java	查询信息面板动作事件类(已完成)
	---分析：泛查找（按钮触发动作事件）--根据年级，性别，系别 ；到数据库中查找，获得一系列学号，显示在列表框，并计算出共有几个记录，
					显示在标签上
			精确查找（列表框触发列表选择事件）--根据学号，到数据库中查找，获得个人信息，显示在个人信息面板中相应的位置
---------------------------------------------------------------------------------------------------

InfoInsActEvents.java	添加信息面板动作事件类(已完成)
	---录入按钮：获取文本内容，添加到数据库，加入判断，数据库中受影响的行数大于0，提示录入成功，否则提示重新录入
		重置按钮：清空文本内容，组合框复原
----------------------------------------------------------------------------------------

InfoUpdActEvents.java	修改信息面板动作事件类(已完成)
	---修改按钮：根据学号到数据库查询信息，把查询结果显示在相应位置
		录入修改按钮：根据文本信息修改数据库中的相应数据
		重置按钮：内容还原为查询结果
------------------------------------------------------------------------------------------

InfoDelActEvents.java	删除信息面板动作事件类(已完成)
	---确定按钮：根据学号到数据库查询信息，把查询结果显示在相应位置
		删除按钮:根据学号删除数据库中的数据
		取消按钮：返回主界面
----------------------------------------------------------------------------------------

UpdPswActEvents.java	修改密码面板动作事件类
	---修改按钮：先判断两个密码是否一致
				是，到数据库中修改密码，并返回结果，告知用户是否修改成功，(否：修改失败，请重新输入)
				否，提示用户“请准确输入您要修改的密码！”
	---重置按钮:文本内容还原
-----------------------------------------------------------------------------------------
	
	
	
	
	
	
	
	
	


LoginView.java			登录界面设计类				lgView
InfoManagerView.java		信息管理系统主界面设计类	managerView

InfoPanel.java			信息面板设计类				infoPan
InfoSelectPanel.java		查询信息面板设计类		infoSelPan
InfoInsertPanel.java		添加信息面板设计类		infoInsPan
InfoUpdatePanel.java		修改信息面板设计类		infoUpdPan
InfoDelPanel.java			删除信息面板设计类		infoDelPan
UpdatePasswordPanel.java	修改密码面板设计类		updPswPan


InfoManager_01.java	信息管理系统主类

LoginActEvents.java登录界面动作事件类				lgActEvnt
InfoManagerActEvents.java信息管理系统主界面动作事件类	managerActEvnt

InfoSelActEvents.java查询信息面板动作事件类			selActEvnt	
InfoInsActEvents.java添加信息面板动作事件类			insActEvnt
InfoUpdActEvents.java修改信息面板动作事件类			updActEvnt
InfoDelActEvents.java删除信息面板动作事件类			delActEvnt
UpdPswActEvents.java修改密码面板动作事件类			updPswActEvnt


BoxItemEvents.java组合框选项事件类					bxItmEvnt		
ListSelEvents.java列表框选项事件类					lsSelEvnt
	
	
（InfoHandleActEvents.java		信息处理动作事件类	infoHdlActEvnt	）
	
	
InfoSelect.java	查询数据库信息类					infoSel
（根据学号查询；根据年级，性别，系别查询）	
	定义一个方法（两个明确:返回值类型，集合Vector<String>,参数列表:四个查询条件）
	判断查询条件，然后加入if语句来执行sql和对？赋值
	
	
InfoUpdate.java	修改数据库信息类		infoUpd
(添加，接收一个数组，将信息添加到数据库
  删除，接收一个（学号）字符串，删除数据库的信息
  修改，接收一个数组，学号,修改数据库的信息)	
（定义一个方法，两个明确：返回值类型，boolean类型，参数列表，集合，学号字符串，标识变量：1添加，2删除，3修改）
	
	
百度小问题：
	1.注销功能：设置用户是方便多人使用同一台机器，不同的用户有不同的权限，注销用户就是更换用户以得到不同的
		权限，一般常使用的是管理员和使用者这两个，从安全角度出发，在不对计算机进行设置和安装软件的话，使用权限
		最低的使用者登陆为好 重新启动和注销功能上的区别 XP是支持多用户的操作系统，便于不同的用户快速登录来使用
		计算机，XP提供了注销功能，使用户不必重新启动计算机就可以实现多用户登录。这样既快捷方便，又减少了对硬件
		的损耗。其实就是安全退出.切换用户 。
	2.
	
	
	
	
	
	
	
	
	
	
	
	
	
SQLServer数据库的图片存储(Java实现)

package cn;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class PhotoDemo {

    /**
     * @param args
     */
    Connection conn=null;
    public PhotoDemo() {
        try {
            String url="jdbc:microsoft:sqlserver://localhost:1433;DatabaseName=master";
            Class.forName("com.microsoft.jdbc.sqlserver.SQLServerDriver");
            conn= DriverManager.getConnection(url,"sa","xiaoxin");     
        }
        catch(SQLException e) {
            e.printStackTrace();
        }
        catch(ClassNotFoundException ce) {
            ce.printStackTrace();
        }
    }
    public void Insert() {
        try {
            String sql="insert into picture values(?,?)";
            PreparedStatement ps=conn.prepareStatement(sql);
            File f =new File("E:/PHOTO/baby/1.jpg");
            
           
            FileInputStream input= new FileInputStream(f);
            ps.setString(1,"cute");
            ps.setBinaryStream(2, input,(int)f.length());
            ps.executeUpdate();
            ps.close();
            input.close();
        }
        catch(SQLException e) {
            e.printStackTrace();
        }
        catch(IOException ie) {
            ie.printStackTrace();
        }
    }
   
    public void Read() {
        try {
            String sql="select picture from picture where name=?";
            PreparedStatement ps=conn.prepareStatement(sql);
            ps.setString(1, "cute");
            ResultSet rs=ps.executeQuery();
            byte [] b=new byte[10240*8];
           
            while(rs.next()) {
                InputStream in=rs.getBinaryStream("picture");
                in.read(b);
                File f=new File("D:/3.jpg");
                FileOutputStream out=new FileOutputStream(f);
                out.write(b, 0, b.length);
                out.close();
            }
           
        }
        catch(SQLException e) {
            e.printStackTrace();
        }
        catch(IOException ie) {
            ie.printStackTrace();
        }
    }
   
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        PhotoDemo p=new PhotoDemo();
        p.Insert();
        p.Read();
    }

}
 其实，很简单的。就是用jdbc取出来，然后用文件输入，输出流来进行操作。 	
	
	
	
成员信息包含照片――功能实现	
1.将图片信息存储到数据库	
	用PreparedStatement对象，给参数赋值时，用setBinaryStream(int parameterIndex,InputStream x,long length)方法，
														parameterIndex - 第一个参数是 1，第二个参数是 2，……
														x - 包含二进制参数值的 Java 输入流
														length - 流中的字节数 
	(File类有个方法：public long length()返回由此抽象路径名表示的文件的长度。如果此路径名表示一个目录，则返回值是不确定的。 )
	
	步骤：先获取图片路径，封装文件
		 封装字节输入流
		 给参数赋值
		 提交sql语句

			String sql="insert into picture values(?)";
            PreparedStatement ps=conn.prepareStatement(sql);
            File f =new File("E:/PHOTO/baby/1.jpg");
            
            FileInputStream input= new FileInputStream(f);
            ps.setBinaryStream(2, input,(int)f.length());
            ps.executeUpdate();
            ps.close();
            input.close();
	
2.将数据库中的图片文件取出，显示在JLable组件上
	
	步骤：
		处理结果集，调用InputStream getBinaryStream(String columnLabel)throws SQLException以未解释的
			 byte 流的形式获取此 ResultSet 对象的当前行中指定列的值。然后，可以按块从流中读取该值。此方法尤其适合于获取很大的
		定义一个字节数组，把图片文件读到改数组中
		创建图标对象，将上面的数组做为参数传递
			public ImageIcon(byte[] imageData)根据字节数组创建一个 ImageIcon，这些字节读取自一个包含
			受支持图像格式（比如 GIF、JPEG 或从 1.3 版本开始的 PNG）的图像文件。通常，此数组是通过使用 
			Class.getResourceAsStream() 读取一幅图像来创建的，但该字节数组也可以静态地存储在某个类中。
			如果得到的图像有一个字符串形式的 "comment" 属性，则该字符串被用作此图标的描述。 
		设置标签上显示的图片
			public void setIcon(Icon icon)定义此组件将要显示的图标。如果 icon 值为 null，则什么也不显示。 
		
			String sql="select picture from picture where name=?";
            PreparedStatement ps=conn.prepareStatement(sql);
            ps.setString(1, "cute");
            ResultSet rs=ps.executeQuery();
            byte [] b=new byte[10240*8];
           
            while(rs.next()) {
                InputStream in=rs.getBinaryStream("picture");
                in.read(b);
                File f=new File("D:/3.jpg");
                FileOutputStream out=new FileOutputStream(f);
                out.write(b, 0, b.length);
                out.close();
            }
	
	
	
	
	
创建信息表
create table PersonInfo(
psw nvarchar(30) not null,
idNumber char(9) not null primary key, 
name nvarchar(10) not null, 
sex char(2) not null, 
grade nvarchar(10) not null, 
dept nvarchar(30) not null, 
major nvarchar(30) not null, 
iden nvarchar(20) not null, 
born datetime null, 
phone char(11) null,
pSignature nvarchar(50) null, 
pAddress nvarchar(50) null,
picture  nvarchar(150) null
)	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
完善：
管理员：增删改查，修改密码；部落成员：只可查；成员要修改，只能修改自己的信息
	1.修改的时候，学号不可修改(已完成)
	2.数据库重新建立，设置好每个字段的类型、范围、约束(已完成)
		（Password, idNumber, name, sex, grade, dept, major, iden, born, phone,pSignature, address）
3.成员不能随意修改密码他人的信息，而且修改密码是管理员的事情，如果是部落成员，修改密码面板设为不可编辑
	4.增删改结果的判断，以1为标准(已完成)
	5.涉及到异常的，在catch块中给出提示
	6.登陆那边，涉及到线程(已完成)
	7.增加一个直接根据学号查询(已完成)
	8.查询时，登陆时，学号不存在的情况要处理(已完成)
	9.泛查询出来的学号排序一下
	10.成员的获得用get方法(已完成)
	11。打开多个面板时，内容清空(已完成)
	12.添加信息时，如果信息已存在，不能录入

	14.信息跟数据库字段匹配，不为空的在录入时，要进行是否为null判断
	15.删除修改查询等时，如果指定学号在数据库中不存在，要弹出对话框提示（若输入的学号没有在库中,则弹出对话框提示"该学号不存在!
		请确认后再输入!";）
	还有，一定要判断学号是否为空
	16.删除信息：输入要删除的学号,打回车,则该学生的相关信息就会在下面的相应项中显示出来,点击"删除"按钮,弹出对话框"确定要删除该
			学生的基本信息吗?",点击"是",则该生基本信息被删除,点击"否",则取消操作;(已完成)
	17.加入一个退出菜单，退出操作界面，返回登录界面(已完成)
	18.加入图片信息(图片文件的处理:在项目路径下定义一个picture文件夹，用来存放图片，在数据库中仅存放文件路径)
			（添加图片时，还有判断指定文件下是否有同名文件）
	Q:创建图片时；路径为空？？？如何处理
	19.没有此返回结果集后都要判断信息是否存在
	20.删除，修改，查询时，如果没有图片，则不显示在标签上
21.修改密码功能：修改的只能是所登录的那个账号的密码
